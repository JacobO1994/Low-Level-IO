Microsoft (R) Macro Assembler Version 14.28.29913.0	    06/03/21 17:36:33
<Designing low-level I/O procedures      (Proj6_934329706.as  Page 1 - 1


				TITLE Designing low-level I/O procedures      (Proj6_934329706.asm)

				; Author: Jacob Ogle
				; Last Modified: May 24th, 2021
				; OSU email address: ogleja@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                Due Date: June 6th 2021
				; Description: A low level I/O program that takes reads a string from a user and displays various numerical data elements of that string
				;

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				; Macros

				; ---------------------------------------------------------------------------------
				; Name: 
				;
				;
				; Preconditions: 
				;
				; Receives:
				;
				; Returns:
				; ---------------------------------------------------------------------------------
				mGetString MACRO
					; Save used registers
					push	edx
					push	ecx
					push	eax
					push	edi
					; Display Prompt
					mov		edx, [ebp+16]
					call	WriteString
					; Read user input string to inputBuffer
					mov		edx, [ebp + 20]
					mov		ecx, 12							; Size of the input buffer
					call	ReadString
					; Store number of input bytes to the numbOfBytes mem location
					mov		edi, [ebp + 24]
					mov		[edi], eax
					; Restore registers
					pop		edi
					pop		eax
					pop		ecx
					pop		edx
				ENDM

				; ---------------------------------------------------------------------------------
				; Name: 
				;
				;
				; Preconditions: 
				;
				; Receives:
				;
				; Returns:
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO
				_nextInString:
					mov		edx, [ebp + 12]
					call	WriteString
					mov		al, ' '
					call	WriteChar
				ENDM

				; Constants
 = 7FFFFFFF			MAX_SIZE_REG = 2147483647
 = 80000000			MAX_NEG_SIZE_REG = 2147483648

 00000000			.data
				; Prompts
 00000000 50 52 4F 47 52	programInfo		BYTE	"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures",
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   57 72 69 74 74
	   65 6E 20 62 79
	   3A 20 4A 61 63
	   6F 62 20 4F 67
	   6C 65 0D 0A 00
										"Written by: Jacob Ogle",13,10,0	
 00000055 50 6C 65 61 73	programRules	BYTE	"Please provide 10 signed decimal integers. Each number needs",
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 20 45 61
	   63 68 20 6E 75
	   6D 62 65 72 20
	   6E 65 65 64 73
	   74 6F 20 62 65
	   20 73 6D 61 6C
	   6C 20 65 6E 6F
	   75 67 68 20 74
	   6F 20 66 69 74
	   20 69 6E 73 69
	   64 65 20 61 20
	   33 32 20 62 69
	   74 20 72 65 67
	   69 73 74 65 72
	   2E 20 41 66 74
	   65 72 20 79 6F
	   75 68 61 76 65
	   20 66 69 6E 69
	   73 68 65 64 20
	   69 6E 70 75 74
	   74 69 6E 67 20
	   74 68 65 20 72
	   61 77 20 6E 75
	   6D 62 65 72 73
	   20 49 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 61 20 6C 69
	   73 74 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 0D
	   0A 00
										"to be small enough to fit inside a 32 bit register. After you",
										"have finished inputting the raw numbers I will display a list",
										"of the integers, their sum, and their average value.",13,10,0
 00000142 50 6C 65 61 73	enterInteger	BYTE	"Please enter an signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 6E
	   20 73 69 67 6E
	   65 64 20 6E 75
	   6D 62 65 72 3A
	   20 00
 00000162 45 52 52 4F 52	errorMsg		BYTE	"ERROR: You did not enter a signed number or your number was too big. - try again",13,10,0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 20 2D
	   20 74 72 79 20
	   61 67 61 69 6E
	   0D 0A 00
 000001B5 50 6C 65 61 73	tryAgain		BYTE	"Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 000001C8 59 6F 75 20 65	enteredFollo	BYTE	"You entered the following numbers: ",13,10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   0D 0A 00
 000001EE 54 68 65 20 73	theSumOfNums	BYTE	"The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 0000020C 54 68 65 20 72	theRoundAvg		BYTE	"The rounded average is: ",0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 00000225 54 68 61 6E 6B	thanks			BYTE	"Thanks for playing!",0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 00

				; Arrays
 00000239  0000000A [		validInputs		SDWORD	10 DUP(?)
	    00000000
	   ]
 00000261  0000000C [		inputBuffer		BYTE	12 DUP(0)
	    00
	   ]
 0000026D 00			numbOfBytes		BYTE	?
 0000026E  0000000C [		asciiOutBuffer	BYTE	12 DUP(?)
	    00
	   ]

				; Values
 0000027A 00000000		validatedInput	SDWORD	?				; Stores the validated input from ReadVal
 0000027E 00			arraySize		BYTE	?				; Stores the number of elements a user inputs

				; Boolean Flags
 0000027F 00			signBool		BYTE	0
 00000280 00			invalidBool		BYTE	0

 00000000			.code
 00000000			main PROC
 00000000  BA 00000000 R		mov		edx, offset programInfo
 00000005  E8 00000000 E		call	WriteString
 0000000A  E8 00000000 E		call	Crlf

 0000000F  BA 00000055 R		mov		edx, offset programRules
 00000014  E8 00000000 E		call	WriteString
 00000019  E8 00000000 E		call	Crlf

					; Test Program - Getting User Data
 0000001E  60				pushad
 0000001F  BB 00000000			mov		ebx, 0
 00000024  BF 00000239 R		mov		edi, offset validInputs
 00000029			_programLoop:
 00000029  83 FB 0A			cmp		ebx, 10
 0000002C  74 53			je		_end
 0000002E  68 0000027A R		push	offset validatedInput		; Building stack frame to get 10 user inputs
 00000033  68 00000280 R		push	offset invalidBool
 00000038  68 0000027F R		push	offset signBool
 0000003D  68 0000026D R		push	offset numbOfBytes
 00000042  68 00000261 R		push	offset inputBuffer
 00000047  68 00000142 R		push	offset enterInteger
 0000004C  68 00000162 R		push	offset errorMsg
 00000051  68 000001B5 R		push	offset tryAgain
 00000056  E8 00000062			call	ReadVal
 0000005B  80 3D 00000280 R		cmp		invalidBool, 1
	   01
 00000062  74 02			je		_notValid
 00000064  EB 0C			jmp		_resume
 00000066			_notValid:
 00000066  BA 00000162 R		mov		edx, offset errorMsg
 0000006B  E8 00000000 E		call	WriteString
 00000070  EB B7			jmp		_programLoop
 00000072			_resume:
 00000072  BE 0000027A R		mov		SDWORD ptr esi, offset validatedInput
 00000077  8B 16			mov		edx, [esi]
 00000079  89 17			mov		[edi], edx
 0000007B  83 C7 04			add		edi, 4						; Register intirect updating the next pointer to the next array element
 0000007E  43				inc		ebx
 0000007F  EB A8			jmp		_programLoop
 00000081			_end:
					; End of getting user data - Next is to Display these values using WriteVal
 00000081  B9 0000000A			mov		ecx, 10
 00000086  BB 00000000			mov		ebx, 0
 0000008B			_loop:
 0000008B  68 0000027E R		push	offset arraySize
 00000090  68 0000027F R		push	offset signBool
 00000095  68 0000026E R		push	offset asciiOutBuffer
 0000009A  68 00000239 R		push	offset validInputs
 0000009F  E8 00000258			call	WriteVal
 000000A4  43				inc		ebx
 000000A5  E2 E4			loop	_loop

 000000A7  68 000001EE R		push	offset theSumOfNums
 000000AC  68 00000239 R		push	offset validInputs
 000000B1  E8 000000F8			call	calcSum

					Invoke ExitProcess,0				; exit to operating system
 000000B6  6A 00	   *	    push   +000000000h
 000000B8  E8 00000000 E   *	    call   ExitProcess
 000000BD			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: 
				;
				;
				; Preconditions:
				;
				; Postconditions:
				;
				; Receives:
				;
				; Returns:
				; ---------------------------------------------------------------------------------
 000000BD			ReadVal PROC
 000000BD  55				push	ebp
 000000BE  8B EC			mov		ebp, esp
					; Call the mGetString MACRO which will grab the user input
					mGetString
 000000C0  52		     1		push	edx
 000000C1  51		     1		push	ecx
 000000C2  50		     1		push	eax
 000000C3  57		     1		push	edi
 000000C4  8B 55 10	     1		mov		edx, [ebp+16]
 000000C7  E8 00000000 E     1		call	WriteString
 000000CC  8B 55 14	     1		mov		edx, [ebp + 20]
 000000CF  B9 0000000C	     1		mov		ecx, 12							; Size of the input buffer
 000000D4  E8 00000000 E     1		call	ReadString
 000000D9  8B 7D 18	     1		mov		edi, [ebp + 24]
 000000DC  89 07	     1		mov		[edi], eax
 000000DE  5F		     1		pop		edi
 000000DF  58		     1		pop		eax
 000000E0  59		     1		pop		ecx
 000000E1  5A		     1		pop		edx
					
					; Restting BoolFlags
 000000E2  60				pushad
 000000E3  8B 7D 20			mov		edi, [ebp + 32]				; Invalid Bool offset
 000000E6  BA 00000000			mov		edx, 0
 000000EB  89 17			mov		[edi], edx
 000000ED  8B 7D 1C			mov		edi, [ebp + 28]
 000000F0  89 17			mov		[edi], edx		
 000000F2  61				popad

					; Convert the string representation to the numerical representation
 000000F3  60				pushad
 000000F4  FC				cld
 000000F5  8B 75 14			mov		esi, [ebp+20]				; inputBuffer offset
 000000F8  8B 7D 18			mov		edi, [ebp+24]	
 000000FB  8B 0F			mov		ecx, [edi]					; loads the number of bytes into ecx
 000000FD  8B C1			mov		eax, ecx
 000000FF  BA 00000000			mov		edx, 0
 00000104			_beginConversion:
 00000104  AC				lodsb
 00000105			_validate:
 00000105  3C 30			cmp		al, 48
 00000107  7C 29			jl		_checkSigns					; if the value is below 48 there is a chance that it is a sign entered by user (+/-)
 00000109  3C 39			cmp		al, 57		
 0000010B  7F 3F			jg		_invalid					; if user input is valid, program implements an algorithm similar to that in module 8
 0000010D  50				push	eax
 0000010E  51				push	ecx
 0000010F  83 E8 30			sub		eax, 48
 00000112  50				push	eax
 00000113  B8 0000000A			mov		eax, 10
 00000118  8B CA			mov		ecx, edx
 0000011A  F7 E1			mul		ecx
 0000011C  70 0B			jo		_overflow
 0000011E  8B C8			mov		ecx, eax
 00000120  58				pop		eax
 00000121  03 C1			add		eax, ecx
 00000123  8B D0			mov		edx, eax
 00000125  59				pop		ecx
 00000126  58				pop		eax
 00000127  EB 05			jmp		_normal
 00000129			_overflow:
 00000129  58				pop		eax
 0000012A  59				pop		ecx
 0000012B  58				pop		eax
 0000012C  EB 1E			jmp		_invalid
 0000012E			_normal:
 0000012E  E2 D4			loop	_beginConversion
 00000130  EB 2A			jmp		_endConversion
 00000132			_checkSigns:
 00000132  3C 2D			cmp		al, 45
 00000134  74 06			je		_setSign
 00000136  3C 2B			cmp		al, 43
 00000138  75 12			jne		_invalid
 0000013A  E2 C8			loop	_beginConversion
 0000013C			_setSign:
 0000013C  57				push	edi
 0000013D  50				push	eax
 0000013E  8B 7D 1C			mov		edi, [ebp+28]
 00000141  B8 00000001			mov		eax, 1
 00000146  89 07			mov		[edi], eax
 00000148  58				pop		eax
 00000149  5F				pop		edi
 0000014A  E2 B8			loop	_beginConversion
 0000014C			_invalid:
 0000014C  57				push	edi
 0000014D  50				push	eax
 0000014E  8B 7D 20			mov		edi, [ebp + 32]					; Set the invalidBool to 1
 00000151  B8 00000001			mov		eax, 1
 00000156  89 07			mov		[edi], eax
 00000158  58				pop		eax
 00000159  5F				pop		edi
 0000015A  EB 4D			jmp		_end
 0000015C			_endConversion:
 0000015C  EB 18			jmp		_sizeCheck
 0000015E			_contEndConv:
 0000015E  53				push	ebx
 0000015F  50				push	eax
 00000160  8B 75 1C			mov		esi, [ebp + 28]					; Check if the signBool is 1, if so negate the value
 00000163  8B 06			mov		eax, [esi]
 00000165  BB 00000001			mov		ebx, 1
 0000016A  3B D8			cmp		ebx, eax
 0000016C  58				pop		eax
 0000016D  5B				pop		ebx
 0000016E  74 02			je		_negate
 00000170  EB 2E			jmp		_storeToMem
 00000172			_negate:
 00000172  F7 DA			neg		edx
 00000174  EB 2A			jmp		_storeToMem
 00000176			_sizeCheck:
 00000176  56				push	esi
 00000177  50				push	eax
 00000178  53				push	ebx
 00000179  8B 75 1C			mov		esi, [ebp + 28]					; Check if the signBool is 1, if so negate the value
 0000017C  8B 06			mov		eax, [esi]
 0000017E  BB 00000001			mov		ebx, 1
 00000183  3B D8			cmp		ebx, eax
 00000185  5B				pop		ebx
 00000186  58				pop		eax
 00000187  5E				pop		esi
 00000188  74 0B			je		_negativeSize
 0000018A  B8 7FFFFFFF			mov		eax, MAX_SIZE_REG
 0000018F  3B D0			cmp		edx, eax
 00000191  77 B9			ja		_invalid
 00000193  EB C9			jmp		_contEndConv
 00000195			_negativeSize:
 00000195  B8 80000000			mov		eax, MAX_NEG_SIZE_REG
 0000019A  3B D0			cmp		edx, eax
 0000019C  77 AE			ja		_invalid
 0000019E  EB BE			jmp		_contEndConv
 000001A0			_storeToMem:
 000001A0  57				push	edi
 000001A1  8B 7D 24			mov		SDWORD ptr edi, [ebp + 36]		; validatedInput offset - repeatedly overwrites previous value
 000001A4  89 17			mov		[edi], edx
 000001A6  5F				pop		edi
 000001A7  EB 00			jmp		_end
 000001A9			_end:
 000001A9  61				popad
 000001AA  5D				pop		ebp
 000001AB  C2 0020			ret	32
 000001AE			ReadVal	ENDP

 000001AE			calcSum PROC
 000001AE  55				push	ebp
 000001AF  8B EC			mov		ebp, esp
 000001B1  E8 00000000 E		call	Crlf
					mDisplayString
 000001B6		     1	_nextInString:
 000001B6  8B 55 0C	     1		mov		edx, [ebp + 12]
 000001B9  E8 00000000 E     1		call	WriteString
 000001BE  B0 20	     1		mov		al, ' '
 000001C0  E8 00000000 E     1		call	WriteChar
 000001C5  60				pushad
 000001C6  8B 7D 08			mov		edi, [ebp + 8]
 000001C9  B9 00000000			mov		ecx, 0
 000001CE  BA 00000000			mov		edx, 0
 000001D3			_sum:
 000001D3  8B 07			mov		eax, [edi]
 000001D5  8B 5F 04			mov		ebx, [edi + TYPE validInputs]
 000001D8  03 C3			add		eax, ebx
 000001DA  03 D0			add		edx, eax
 000001DC  83 C1 02			add		ecx, 2
 000001DF  83 F9 0A			cmp		ecx, 10
 000001E2  74 05			je		_endOfSum
 000001E4  83 C7 08			add		edi, 2*TYPE validInputs
 000001E7  EB EA			jmp		_sum
 000001E9			_endOfSum:
 000001E9  8B C2			mov		eax, edx
 000001EB  E8 00000000 E		call	WriteInt
 000001F0  61				popad
 000001F1  5D				pop		ebp
 000001F2  C2 0008			ret		8
 000001F5			calcSum	ENDP	

 000001F5			convertToASCII PROC
 000001F5  55				push	ebp
 000001F6  8B EC			mov		ebp, esp
 000001F8  60				pushad
 000001F9  8B 75 08			mov		esi, [ebp + 8]
 000001FC  8B FE			mov		edi, esi
 000001FE  8B 45 0C			mov		eax, [ebp + 12]
 00000201  8B 08			mov		ecx, [eax]
 00000203			_comparisons:
 00000203  83 F9 00			cmp		ecx, 0
 00000206  0F 84 000000D0		je		_endOfComparisons
 0000020C  8A 06			mov		al, [esi]
 0000020E  3C 2D			cmp		al, 45
 00000210  74 02			je		_negative
 00000212  EB 08			jmp		_numbers
 00000214			_negative:
 00000214  83 C7 01			add		edi, 1
 00000217  83 C6 01			add		esi, 1
 0000021A  EB E7			jmp		_comparisons
 0000021C			_numbers:
 0000021C  3C 01			cmp		al, 1
 0000021E  74 28			je		_one
 00000220  3C 02			cmp		al, 2
 00000222  74 31			je		_two
 00000224  3C 03			cmp		al, 3
 00000226  74 3A			je		_three
 00000228  3C 04			cmp		al, 4
 0000022A  74 43			je		_four
 0000022C  3C 05			cmp		al, 5
 0000022E  74 4C			je		_five
 00000230  3C 06			cmp		al, 6
 00000232  74 58			je		_six
 00000234  3C 07			cmp		al, 7
 00000236  74 64			je		_seven
 00000238  3C 08			cmp		al, 8
 0000023A  74 70			je		_eight
 0000023C  3C 09			cmp		al, 9
 0000023E  74 7C			je		_nine
 00000240  3C 00			cmp		al, 0
 00000242  0F 84 00000084		je		_zero
 00000248			_one:
 00000248  B3 31			mov		bl, 49
 0000024A  88 1F			mov		[edi], bl
 0000024C  83 C7 01			add		edi, 1
 0000024F  83 C6 01			add		esi, 1
 00000252  49				dec		ecx
 00000253  EB AE			jmp		_comparisons
 00000255			_two:
 00000255  B3 32			mov		bl, 50
 00000257  88 1F			mov		[edi], bl
 00000259  83 C7 01			add		edi, 1
 0000025C  83 C6 01			add		esi, 1
 0000025F  49				dec		ecx
 00000260  EB A1			jmp		_comparisons
 00000262			_three:
 00000262  B3 33			mov		bl, 51
 00000264  88 1F			mov		[edi], bl
 00000266  83 C7 01			add		edi, 1
 00000269  83 C6 01			add		esi, 1
 0000026C  49				dec		ecx
 0000026D  EB 94			jmp		_comparisons
 0000026F			_four:
 0000026F  B3 34			mov		bl, 52
 00000271  88 1F			mov		[edi], bl
 00000273  83 C7 01			add		edi, 1
 00000276  83 C6 01			add		esi, 1
 00000279  49				dec		ecx
 0000027A  EB 87			jmp		_comparisons
 0000027C			_five:
 0000027C  B3 35			mov		bl, 53
 0000027E  88 1F			mov		[edi], bl
 00000280  83 C7 01			add		edi, 1
 00000283  83 C6 01			add		esi, 1
 00000286  49				dec		ecx
 00000287  E9 FFFFFF77			jmp		_comparisons
 0000028C			_six:
 0000028C  B3 36			mov		bl, 54
 0000028E  88 1F			mov		[edi], bl
 00000290  83 C7 01			add		edi, 1
 00000293  83 C6 01			add		esi, 1
 00000296  49				dec		ecx
 00000297  E9 FFFFFF67			jmp		_comparisons
 0000029C			_seven:
 0000029C  B3 37			mov		bl, 55
 0000029E  88 1F			mov		[edi], bl
 000002A0  83 C7 01			add		edi, 1
 000002A3  83 C6 01			add		esi, 1
 000002A6  49				dec		ecx
 000002A7  E9 FFFFFF57			jmp		_comparisons
 000002AC			_eight:
 000002AC  B3 38			mov		bl, 56
 000002AE  88 1F			mov		[edi], bl
 000002B0  83 C7 01			add		edi, 1
 000002B3  83 C6 01			add		esi, 1
 000002B6  49				dec		ecx
 000002B7  E9 FFFFFF47			jmp		_comparisons
 000002BC			_nine:
 000002BC  B3 39			mov		bl, 57
 000002BE  88 1F			mov		[edi], bl
 000002C0  83 C7 01			add		edi, 1
 000002C3  83 C6 01			add		esi, 1
 000002C6  49				dec		ecx
 000002C7  E9 FFFFFF37			jmp		_comparisons
 000002CC			_zero:
 000002CC  B3 30			mov		bl, 48
 000002CE  88 1F			mov		[edi], bl
 000002D0  83 C7 01			add		edi, 1
 000002D3  83 C6 01			add		esi, 1
 000002D6  49				dec		ecx
 000002D7  E9 FFFFFF27			jmp		_comparisons
 000002DC			_endOfComparisons:
 000002DC  61				popad
 000002DD  5D				pop		ebp
 000002DE  C2 0008			ret		8
 000002E1			convertToASCII ENDP

 000002E1			clearBuffer PROC
 000002E1  55				push	ebp
 000002E2  8B EC			mov		ebp, esp
 000002E4  60				pushad
 000002E5  8B 75 08			mov		esi, [ebp + 8]
 000002E8  B9 0000000C			mov		ecx, 12
 000002ED			_clearLoop:
 000002ED  B8 00000000			mov		eax, 0
 000002F2  89 06			mov		[esi], eax						; Repeatedly adds zero the the array position pointed to by esi
 000002F4  46				inc		esi
 000002F5  E2 F6			loop	_clearLoop
 000002F7  61				popad
 000002F8  5D				pop		ebp
 000002F9  C2 0004			ret		4
 000002FC			clearBuffer ENDP



 000002FC			WriteVal PROC
 000002FC  55				push	ebp
 000002FD  8B EC			mov		ebp, esp
 000002FF  8B 7D 0C			mov		edi, [ebp + 12]
 00000302  8B 75 08			mov		esi, [ebp + 8]
 00000305  50				push	eax
 00000306  52				push	edx
 00000307  53				push	ebx
 00000308  B8 00000004			mov		eax, 4							; As we iterate in the main procedure, we will track which iteration we are on via ebx and then add 4x[ebx] to the esi pointer so that we are capturing each element of thea array
 0000030D  F7 E3			mul		ebx
 0000030F  03 F0			add		esi, eax
 00000311  5B				pop		ebx
 00000312  5A				pop		edx
 00000313  58				pop		eax
 00000314  60				pushad
 00000315  BB 0000000A			mov		ebx, 10
 0000031A  B9 00000000			mov		ecx, 0
 0000031F			_divStart:
 0000031F  8B 06			mov		eax, [esi]
 00000321  83 F8 00			cmp		eax, 0
 00000324  7C 11			jl		_invert
 00000326			_resumeWithDiv:
 00000326  FC				cld
 00000327			_divRemaining:
 00000327  41				inc		ecx
 00000328  BA 00000000			mov		edx, 0
 0000032D  F7 F3			div		ebx
 0000032F  52				push	edx
 00000330  83 F8 00			cmp		eax, 0
 00000333  74 14			je		_doneDiv
 00000335  EB F0			jmp		_divRemaining
 00000337			_invert:									; If a negative value is added, updates the sign boolean global and then negates the value
 00000337  50				push	eax
 00000338  56				push	esi
 00000339  8B 75 10			mov		esi, [ebp + 16]
 0000033C  B8 00000001			mov		eax, 1
 00000341  89 06			mov		[esi], eax
 00000343  5E				pop		esi
 00000344  58				pop		eax
 00000345  F7 D8			neg		eax
 00000347  EB DD			jmp		_resumeWithDiv
 00000349			_doneDiv:
 00000349  57				push	edi
 0000034A  53				push	ebx
 0000034B  8B 7D 10			mov		edi, [ebp + 16]
 0000034E  8B 1F			mov		ebx, [edi]
 00000350  83 FB 01			cmp		ebx, 1							; Checking for sign boolean flag that, if set, will jump to _addSign and push the negative sign value that will be added to the string
 00000353  5B				pop		ebx
 00000354  5F				pop		edi
 00000355  74 10			je		_addSign
 00000357			_storeSize:									; Stores the size of the user input array which will be used in the conversion of ascii values
 00000357  60				pushad
 00000358  8B 7D 14			mov		edi, [ebp + 20]
 0000035B  B8 00000000			mov		eax, 0
 00000360  89 07			mov		[edi], eax
 00000362  89 0F			mov		[edi], ecx
 00000364  61				popad
 00000365  EB 08			jmp		_resumeBufferAdding
 00000367			_addSign:
 00000367  B8 0000002D			mov		eax, 45
 0000036C  AA				stosb
 0000036D  EB E8			jmp		_storeSize
 0000036F			_resumeBufferAdding:
 0000036F  58				pop		eax
 00000370  AA				stosb
 00000371  E2 FC			loop	_resumeBufferAdding
 00000373  FF 75 14			push	[ebp + 20]
 00000376  FF 75 0C			push	[ebp + 12]
 00000379  E8 FFFFFE77			call	convertToASCII					; Calling a subprocedure to convert the values to their ASCII representation
					mDisplayString
 0000037E		     1	_nextInString:
 0000037E  8B 55 0C	     1		mov		edx, [ebp + 12]
 00000381  E8 00000000 E     1		call	WriteString
 00000386  B0 20	     1		mov		al, ' '
 00000388  E8 00000000 E     1		call	WriteChar
 0000038D  FF 75 0C			push	[ebp + 12]
 00000390  E8 FFFFFF4C			call	clearBuffer						; Calling a subprocedure to clear the asciiOutBuffer so that values do not remain for the next iteration
 00000395  61				popad
 00000396  5D				pop		ebp
 00000397  C2 0010			ret		16
 0000039A			writeVal ENDP

				END main
Microsoft (R) Macro Assembler Version 14.28.29913.0	    06/03/21 17:36:33
<Designing low-level I/O procedures      (Proj6_934329706.as  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000281 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000039A Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000BD _TEXT	Length= 000000F1 Public STDCALL
  _beginConversion . . . . . . .	L Near	 00000104 _TEXT	
  _validate  . . . . . . . . . .	L Near	 00000105 _TEXT	
  _overflow  . . . . . . . . . .	L Near	 00000129 _TEXT	
  _normal  . . . . . . . . . . .	L Near	 0000012E _TEXT	
  _checkSigns  . . . . . . . . .	L Near	 00000132 _TEXT	
  _setSign . . . . . . . . . . .	L Near	 0000013C _TEXT	
  _invalid . . . . . . . . . . .	L Near	 0000014C _TEXT	
  _endConversion . . . . . . . .	L Near	 0000015C _TEXT	
  _contEndConv . . . . . . . . .	L Near	 0000015E _TEXT	
  _negate  . . . . . . . . . . .	L Near	 00000172 _TEXT	
  _sizeCheck . . . . . . . . . .	L Near	 00000176 _TEXT	
  _negativeSize  . . . . . . . .	L Near	 00000195 _TEXT	
  _storeToMem  . . . . . . . . .	L Near	 000001A0 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000001A9 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000002FC _TEXT	Length= 0000009E Public STDCALL
  _divStart  . . . . . . . . . .	L Near	 0000031F _TEXT	
  _resumeWithDiv . . . . . . . .	L Near	 00000326 _TEXT	
  _divRemaining  . . . . . . . .	L Near	 00000327 _TEXT	
  _invert  . . . . . . . . . . .	L Near	 00000337 _TEXT	
  _doneDiv . . . . . . . . . . .	L Near	 00000349 _TEXT	
  _storeSize . . . . . . . . . .	L Near	 00000357 _TEXT	
  _addSign . . . . . . . . . . .	L Near	 00000367 _TEXT	
  _resumeBufferAdding  . . . . .	L Near	 0000036F _TEXT	
  _nextInString  . . . . . . . .	L Near	 0000037E _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calcSum  . . . . . . . . . . . .	P Near	 000001AE _TEXT	Length= 00000047 Public STDCALL
  _nextInString  . . . . . . . .	L Near	 000001B6 _TEXT	
  _sum . . . . . . . . . . . . .	L Near	 000001D3 _TEXT	
  _endOfSum  . . . . . . . . . .	L Near	 000001E9 _TEXT	
clearBuffer  . . . . . . . . . .	P Near	 000002E1 _TEXT	Length= 0000001B Public STDCALL
  _clearLoop . . . . . . . . . .	L Near	 000002ED _TEXT	
convertToASCII . . . . . . . . .	P Near	 000001F5 _TEXT	Length= 000000EC Public STDCALL
  _comparisons . . . . . . . . .	L Near	 00000203 _TEXT	
  _negative  . . . . . . . . . .	L Near	 00000214 _TEXT	
  _numbers . . . . . . . . . . .	L Near	 0000021C _TEXT	
  _one . . . . . . . . . . . . .	L Near	 00000248 _TEXT	
  _two . . . . . . . . . . . . .	L Near	 00000255 _TEXT	
  _three . . . . . . . . . . . .	L Near	 00000262 _TEXT	
  _four  . . . . . . . . . . . .	L Near	 0000026F _TEXT	
  _five  . . . . . . . . . . . .	L Near	 0000027C _TEXT	
  _six . . . . . . . . . . . . .	L Near	 0000028C _TEXT	
  _seven . . . . . . . . . . . .	L Near	 0000029C _TEXT	
  _eight . . . . . . . . . . . .	L Near	 000002AC _TEXT	
  _nine  . . . . . . . . . . . .	L Near	 000002BC _TEXT	
  _zero  . . . . . . . . . . . .	L Near	 000002CC _TEXT	
  _endOfComparisons  . . . . . .	L Near	 000002DC _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000BD Public STDCALL
  _programLoop . . . . . . . . .	L Near	 00000029 _TEXT	
  _notValid  . . . . . . . . . .	L Near	 00000066 _TEXT	
  _resume  . . . . . . . . . . .	L Near	 00000072 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000081 _TEXT	
  _loop  . . . . . . . . . . . .	L Near	 0000008B _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_NEG_SIZE_REG . . . . . . . .	Number	 -80000000h   
MAX_SIZE_REG . . . . . . . . . .	Number	 7FFFFFFFh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arraySize  . . . . . . . . . . .	Byte	 0000027E _DATA	
asciiOutBuffer . . . . . . . . .	Byte	 0000026E _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enterInteger . . . . . . . . . .	Byte	 00000142 _DATA	
enteredFollo . . . . . . . . . .	Byte	 000001C8 _DATA	
errorMsg . . . . . . . . . . . .	Byte	 00000162 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputBuffer  . . . . . . . . . .	Byte	 00000261 _DATA	
invalidBool  . . . . . . . . . .	Byte	 00000280 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numbOfBytes  . . . . . . . . . .	Byte	 0000026D _DATA	
programInfo  . . . . . . . . . .	Byte	 00000000 _DATA	
programRules . . . . . . . . . .	Byte	 00000055 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
signBool . . . . . . . . . . . .	Byte	 0000027F _DATA	
thanks . . . . . . . . . . . . .	Byte	 00000225 _DATA	
theRoundAvg  . . . . . . . . . .	Byte	 0000020C _DATA	
theSumOfNums . . . . . . . . . .	Byte	 000001EE _DATA	
tryAgain . . . . . . . . . . . .	Byte	 000001B5 _DATA	
validInputs  . . . . . . . . . .	DWord	 00000239 _DATA	
validatedInput . . . . . . . . .	DWord	 0000027A _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
